// Configure Nodemailer
const transporter = nodemailer.createTransport({
  host: process.env.EMAIL_HOST,
  port: process.env.EMAIL_PORT,
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS,
  },
});

// 1️⃣ **Request Password Reset**
app.post("/forgot-password", (req, res) => {
  const { email } = req.body;
  if (!email) return res.status(400).send("Email is required");

  const token = crypto.randomBytes(32).toString("hex");
  const expiry = new Date(Date.now() + 3600000); // 1 hour expiration

  db.query("SELECT * FROM users WHERE email = ?", [email], (err, result) => {
    if (err) return res.status(500).send("Server error");
    if (result.length === 0) return res.status(404).send("Email not found");

    // Store token in DB
    db.query(
      "UPDATE users SET reset_token = ?, reset_token_expiry = ? WHERE email = ?",
      [token, expiry, email],
      (err) => {
        if (err) return res.status(500).send("Server error");

        // Send email
        const resetLink = `${process.env.BASE_URL}/reset-password/${token}`;
        const mailOptions = {
          from: process.env.EMAIL_USER,
          to: email,
          subject: "Password Reset Request",
          html: `<p>You requested a password reset. Click <a href="${resetLink}">here</a> to reset your password. This link expires in 1 hour.</p>`,
        };

        transporter.sendMail(mailOptions, (error) => {
          if (error) return res.status(500).send("Failed to send email");
          res.send("Password reset email sent");
        });
      }
    );
  });
});

// 2️⃣ **Verify Reset Token**
app.get("/reset-password/:token", (req, res) => {
  const { token } = req.params;

  db.query(
    "SELECT * FROM users WHERE reset_token = ? AND reset_token_expiry > NOW()",
    [token],
    (err, result) => {
      if (err) return res.status(500).send("Server error");
      if (result.length === 0) return res.status(400).send("Invalid or expired token");

      res.send("Valid token, show reset password form");
    }
  );
});

// 3️⃣ **Reset Password**
app.post("/reset-password", (req, res) => {
  const { token, newPassword } = req.body;

  if (!token || !newPassword) return res.status(400).send("Invalid request");

  db.query(
    "SELECT * FROM users WHERE reset_token = ? AND reset_token_expiry > NOW()",
    [token],
    async (err, result) => {
      if (err) return res.status(500).send("Server error");
      if (result.length === 0) return res.status(400).send("Invalid or expired token");

      const hashedPassword = await bcrypt.hash(newPassword, 10);

      db.query(
        "UPDATE users SET password = ?, reset_token = NULL, reset_token_expiry = NULL WHERE reset_token = ?",
        [hashedPassword, token],
        (err) => {
          if (err) return res.status(500).send("Server error");
          res.send("Password has been reset successfully");
        }
      );
    }
  );
});



DB_HOST=your_database_host
DB_USER=your_database_user
DB_PASS=your_database_password
DB_NAME=your_database_name

EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USER=your_email@gmail.com
EMAIL_PASS=your_email_password

BASE_URL=http://localhost:3000


CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    email VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    reset_token VARCHAR(255),
    reset_token_expiry DATETIME
);

